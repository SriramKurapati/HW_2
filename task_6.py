# -*- coding: utf-8 -*-
"""Task_6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12TJJhwf4daJFTSpWSCY7fYW3hU6omFiR
"""

# Load libraries
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# given data
x1 = np.array([-1, -1])
x2 = np.array([-1, +1])
x3 = np.array([+1, -1])
x4 = np.array([+1, +1])

X = np.array([x1, x2, x3, x4])
Y = np.array([-1, 1, 1, -1])  

plt.rcParams["figure.figsize"] = [7.00, 4.00]
plt.grid()

for k, x in enumerate(X):
    if Y[k] > 0:
        plt.plot(x[0], x[1], "bo", label='Positive')
    else:
        plt.plot(x[0], x[1], "ro", label='Negative')

handles, labels = plt.gca().get_legend_handles_labels() 
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys())
plt.show()

for k, x in enumerate(X):
    print(f'{x} <--> {[x[0], x[0] * x[1]]}')
    X[k] = [x[0], x[0] * x[1]]

plt.rcParams["figure.figsize"] = [7.00, 4.00]
plt.grid()

for k, x in enumerate(X):
    if Y[k] > 0:
        plt.plot(x[0], x[1], "bo", label='Positive')
    else:
        plt.plot(x[0], x[1], "ro", label='Negative')
plt.axhline(y=0, color='g', linestyle='--', label='maximal margin separator')
handles, labels = plt.gca().get_legend_handles_labels() 
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys())
plt.show()
#Margin is the distance from the decision boundary to either of the support vectors
mid = (x+x2)/2 
m = abs(np.cross(x2-x1,mid-x1)/np.linalg.norm(x2-x1))
print(f'Margin = {m}')
